# This file is part of osint.py program
# @lymbin 2021-2022
# 
# Original author Andrea Fioraldi with fixes from lymbin
#

import os
import json
import csv
import sys

from .exploitdb_update import ExploitDBUpdater

exploitdb_name = 'exploitdb'
files_exploits = 'files_exploits.csv'
exploitdb_mapping_cve = 'exploitdb_mapping_cve.json'


class ExploitDB:
    """
    Sploit uses for search exploits for its CVE ID
    """

    def __init__(self, packages_folder):
        self.exploitdb_path = os.path.join(packages_folder, exploitdb_name)
        self.files_exploits_path = os.path.join(packages_folder, exploitdb_name, files_exploits)
        self.cve_map = {}
        if not os.path.exists(os.path.join(packages_folder, exploitdb_name)):
            self.init(packages_folder)
        if not os.path.exists(os.path.join(packages_folder, exploitdb_mapping_cve)):
            self.update(packages_folder)
        with open(os.path.join(packages_folder, exploitdb_mapping_cve)) as data_file:
            self.cve_map = json.load(data_file)

    def iter_edbid_from_cve(self, cve):
        cve = cve.upper()
        if cve not in self.cve_map:
            return

        with open(self.files_exploits_path) as files:
            reader = csv.reader(files)
            # reader.next() #skip header
            next(reader)

            for row in reader:
                edb, file, description, date, author, platform, type, port = tuple(row)
                if edb in self.cve_map[cve]:
                    yield int(edb)

        return

    def edbid_from_cve(self, cve):
        return list(self.iter_edbid_from_cve(cve))

    def iter_cve_from_edbid(self, edb):
        edb = str(int(edb))

        for cve in self.cve_map:
            if edb in self.cve_map[cve]:
                yield cve.upper()

    def cve_from_edbid(self, edb):
        return list(self.iter_cve_from_edbid(edb))

    def _search_cve_aux(self, cve):
        files = open(self.files_exploits_path)
        reader = csv.reader(files)
        # reader.next() #skip header
        next(reader)

        found = False
        for row in reader:
            edb, file, description, date, author, platform, type, port = tuple(row)
            if edb in self.cve_map[cve]:
                file_path = os.path.join(self.exploitdb_path, file)
                found = True
                print(" Exploit DB Id: " + edb)
                print(" File: " + file_path)
                print(" Date: " + date)
                print(" Author: " + author)
                print(" Platform: " + platform)
                print(" Type: " + type)
                if port != "0":
                    print(" Port: " + port)
                print("")
        if not found:
            print("ERROR - No EDB Id found")
            print("")

        files.close()
        return found

    def search_from_file(self, file):
        for line in file:
            line = line.strip()
            if not line:
                continue

            cve = line.upper()
            sname = "| " + cve + " |"
            print("+" + "-" * (len(sname) - 2) + "+")
            print(sname)
            print("+" + "-" * (len(sname) - 2) + "+")
            print("")

            if not cve in self.cve_map:
                print("ERROR - CVE not found.")
                print("")
                continue

            self._search_cve_aux(cve)

    def search_from_nessus(self, file):
        reader = csv.reader(file)
        # reader.next() #skip header
        next(reader)

        for row in reader:
            cve = tuple(row)[1].upper()
            proto = tuple(row)[5]
            port = tuple(row)[6]
            name = tuple(row)[7]

            if not cve in self.cve_map:
                continue

            sname = "| " + name + " |"
            print("+" + "-" * (len(sname) - 2) + "+")
            print(sname)
            print("+" + "-" * (len(sname) - 2) + "+")
            print("")
            print(" CVE: " + cve)
            print(" Protocol: " + proto)
            print(" Port: " + port)
            print("")
            print(" +----+ Exploit DB matching +----+ ")
            print("")

            self._search_cve_aux(cve)
            print("")

    def search_cve(self, cve):
        cve = cve.upper()

        sname = "| " + cve + " |"
        print("+" + "-" * (len(sname) - 2) + "+")
        print(sname)
        print("+" + "-" * (len(sname) - 2) + "+")
        print("")

        if cve not in self.cve_map:
            print("ERROR - CVE not found.")
            print("")
            sys.exit(1)

        found = self._search_cve_aux(cve)

    @staticmethod
    def update(packages_folder):
        ExploitDBUpdater.update(packages_folder)

    @staticmethod
    def init(packages_folder):
        ExploitDBUpdater.init(packages_folder)
