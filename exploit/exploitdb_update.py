# This file is part of osint.py program
# @lymbin 2021-2022

import os
import json
import time
import random
import requests
import progressbar
import csv
import sys

if sys.version_info[0] < 3:
    range = xrange

exploitdb_name = 'exploitdb'
exploitdb_mapping = 'exploitdb_mapping.json'
exploitdb_mapping_cve = 'exploitdb_mapping_cve.json'
files_exploits = 'files_exploits.csv'

get_header = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}

exploitdb_git_path = 'https://gitlab.com/exploit-database/exploitdb.git'


class ExploitDBUpdater:
    @staticmethod
    def update(packages_folder):
        data = {}

        if not os.path.exists(os.path.join(packages_folder, exploitdb_mapping)):
            with open(os.path.join(packages_folder, exploitdb_mapping), "w") as data_file:
                json.dump(data, data_file)
        else:
            with open(os.path.join(packages_folder, exploitdb_mapping)) as data_file:
                data = json.load(data_file)

        if not os.path.exists(os.path.join(packages_folder, exploitdb_name)):
            ExploitDBUpdater.init(packages_folder)
        else:
            print("Refreshing exploit-database repo with latest exploits")
            os.system("cd %s; git pull origin master" % os.path.join(packages_folder, exploitdb_name))

        files = open(os.path.join(packages_folder, exploitdb_name, files_exploits))
        reader = csv.reader(files)
        # reader.next() #skip header
        next(reader)

        reader = list(reader)
        csv_len = len(reader)

        def locations_of_substring(string, substring):
            substring_length = len(substring)

            def recurse(locations_found, start):
                location = string.find(substring, start)
                if location != -1:
                    return recurse(locations_found + [location], location + substring_length)
                else:
                    return locations_found

            return recurse([], 0)

        print("Refreshing EDBID-CVE mapping")
        with progressbar.ProgressBar(max_value=csv_len) as bar:
            for i in range(csv_len):
                edb = tuple(reader[i])[0]
                if edb in data:
                    # print "Skipping edb id " + edb
                    pass
                else:
                    # print "Downloading https://www.exploit-db.com/exploits/" + edb
                    content = ""
                    while True:
                        try:
                            r = requests.get("https://www.exploit-db.com/exploits/" + edb, headers=get_header)
                            content = r.text
                        except Exception:
                            time.sleep(10)
                            continue
                        finally:
                            break
                    used = []
                    indexes = locations_of_substring(content, 'https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-')
                    for pos in indexes:
                        cve = r.text[pos + len('https://cve.mitre.org/cgi-bin/cvename.cgi?name='): pos + len(
                            'https://cve.mitre.org/cgi-bin/cvename.cgi?name=') + 9].upper()
                        pos += len('https://cve.mitre.org/cgi-bin/cvename.cgi?name=') + 9
                        while pos < len(r.text) and r.text[pos].isdigit():
                            cve += r.text[pos]
                            pos += 1
                        cve = cve.replace("\u2013", "-")
                        if cve in used: continue
                        used.append(cve)
                        print("Found: edbid " + edb + " <---> " + cve)
                    indexes = locations_of_substring(content, 'https://nvd.nist.gov/vuln/detail/CVE-')
                    for pos in indexes:
                        cve = r.text[pos + len('https://nvd.nist.gov/vuln/detail/'): pos + len(
                            'https://nvd.nist.gov/vuln/detail/') + 9].upper()
                        pos += len('https://nvd.nist.gov/vuln/detail/') + 9
                        while pos < len(r.text) and r.text[pos].isdigit():
                            cve += r.text[pos]
                            pos += 1
                        cve = cve.replace("\u2013", "-")
                        if cve in used: continue
                        used.append(cve)
                        print("Found: edbid " + edb + " <---> " + cve)
                    data[edb] = used
                    time.sleep(random.uniform(0.1, 0.2))
                bar.update(i)

        with open(os.path.join(packages_folder, exploitdb_mapping), "w") as data_file:
            json.dump(data, data_file, indent=2)

        cve_data = {}
        for k, v in data.items():
            for e in v:
                cve_data[e] = cve_data.get(e, [])
                cve_data[e].append(k)

        with open(os.path.join(packages_folder, exploitdb_mapping_cve), "w") as data_file:
            json.dump(cve_data, data_file, indent=2)

    @staticmethod
    def init(packages_folder):
        try:
            if not os.path.exists(os.path.join(packages_folder, exploitdb_name)):
                print("Init exploit-database repo with latest exploits")
                os.system("cd %s; git clone %s" % (packages_folder, exploitdb_git_path))
            else:
                print("Refreshing exploit-database repo with latest exploits")
                os.system("cd %s; git pull origin master" % os.path.join(packages_folder, exploitdb_name))
        except Exception as e:
            print('Failed to init. Reason: %s' % e)
